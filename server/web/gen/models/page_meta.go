// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PageMeta 描述分页信息的元信息
//
// swagger:model PageMeta
type PageMeta struct {

	// 页面数据条数限制
	// Required: true
	Limit *int64 `json:"limit"`

	// 页面索引
	// Required: true
	Page *int64 `json:"page"`

	// 总共数据条数
	// Required: true
	Total *int64 `json:"total"`

	// 总页数
	// Required: true
	TotalPage *int64 `json:"total_page"`
}

// Validate validates this page meta
func (m *PageMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageMeta) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *PageMeta) validatePage(formats strfmt.Registry) error {

	if err := validate.Required("page", "body", m.Page); err != nil {
		return err
	}

	return nil
}

func (m *PageMeta) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

func (m *PageMeta) validateTotalPage(formats strfmt.Registry) error {

	if err := validate.Required("total_page", "body", m.TotalPage); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this page meta based on context it is used
func (m *PageMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PageMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageMeta) UnmarshalBinary(b []byte) error {
	var res PageMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
