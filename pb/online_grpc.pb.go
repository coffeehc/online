// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OnlineClient is the client API for Online service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnlineClient interface {
	// Login
	UserInfo(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	// 上传
	UploadPlugin(ctx context.Context, in *YakitPlugin, opts ...grpc.CallOption) (*Empty, error)
}

type onlineClient struct {
	cc grpc.ClientConnInterface
}

func NewOnlineClient(cc grpc.ClientConnInterface) OnlineClient {
	return &onlineClient{cc}
}

func (c *onlineClient) UserInfo(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Online/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onlineClient) UploadPlugin(ctx context.Context, in *YakitPlugin, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Online/UploadPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlineServer is the server API for Online service.
// All implementations must embed UnimplementedOnlineServer
// for forward compatibility
type OnlineServer interface {
	// Login
	UserInfo(context.Context, *Token) (*Empty, error)
	// 上传
	UploadPlugin(context.Context, *YakitPlugin) (*Empty, error)
	mustEmbedUnimplementedOnlineServer()
}

// UnimplementedOnlineServer must be embedded to have forward compatible implementations.
type UnimplementedOnlineServer struct {
}

func (UnimplementedOnlineServer) UserInfo(context.Context, *Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedOnlineServer) UploadPlugin(context.Context, *YakitPlugin) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPlugin not implemented")
}
func (UnimplementedOnlineServer) mustEmbedUnimplementedOnlineServer() {}

// UnsafeOnlineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnlineServer will
// result in compilation errors.
type UnsafeOnlineServer interface {
	mustEmbedUnimplementedOnlineServer()
}

func RegisterOnlineServer(s grpc.ServiceRegistrar, srv OnlineServer) {
	s.RegisterService(&Online_ServiceDesc, srv)
}

func _Online_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Online/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServer).UserInfo(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Online_UploadPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YakitPlugin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlineServer).UploadPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Online/UploadPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlineServer).UploadPlugin(ctx, req.(*YakitPlugin))
	}
	return interceptor(ctx, in, info, handler)
}

// Online_ServiceDesc is the grpc.ServiceDesc for Online service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Online_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Online",
	HandlerType: (*OnlineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInfo",
			Handler:    _Online_UserInfo_Handler,
		},
		{
			MethodName: "UploadPlugin",
			Handler:    _Online_UploadPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "online.proto",
}
